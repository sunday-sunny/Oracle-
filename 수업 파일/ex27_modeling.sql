-- ex27_modeling.sql

/*

1. ANSI-SQL
2. 설계(Modeling, ERD)
3. PL/SQL

데이터베이스 구축
- 프로젝트 진행 > 대량의 데이터 발생 > 저장하기 위한 조직화된 구조 생성 > 설계 > 구축

1. 데이터베이스 모델링
    - 가장 초반에 하는 작업
    - 가장 중요한 작업
    - 설계도(***)
    - 요구분석 > 정보(Raw) 도출 + 수집 > 분석(구분, 공통) > 저장 구조(릴레이션, 속성.. )
    > 도식화 (설계도) > ERD
    - 데이터베이스 모델링 결과물 > ERD(최종 산출물)
    - 아직 이 단계에서는 DBMS의 종류를 결정하지 않는다. > 추상적


2. 데이터베이스 설계
    - 실제 사용할 DBMS를 결정한다. > 오라클
    - 모델링 결과물(ERD) > 구체화하는 작업(오라클에 맞게 작업)
    - 식별자 생성, 자료형 지정, 제약 사항, 관계 등..
    - ERD(구체적)
    - DDL > SQL(Script)


3. 데이터베이스 구축
    - 1~2 결과 토대 > 현실화 > 물리적으로 구현
    - SQL 사용


4. 데이터 추가
    - 데미 데이터
    - 실제 데이터
    - SQL 사용
    
    
5. 업무 SQL 작성
    - 요구 분석서의 모든 업무 > SQL 작성
*/


/*
데이터 베이스 모델링

1. ERD, Entity Relationship Diagram
    - 엔티티간의 관계를 표현한 그림
    - 데이터베이스 모델링 기법 중 하나 > 대표적 방법
    - 손, 오피스, 전문툴(eXERD, ER-WIN, SQL Developer Modeler)


2. Entity, 엔티티
    - 다른 Entity와 분류(구분) 될 수 있고, 다른 Entity에 대해 정해진 관계를 맺을 수 있는 데이터 단위
    - 릴레이션(속성, 속성, 속성..) -> 테이블(컬럼, 컬럼, 컬럼) > 릴레이션 = 레코드 = 객체
    - (릴레이션 == 엔티티) = 테이블
    
    ex) 교육 센터 관리 프로그램
        a.  학생 정보 관리
            - 정보 : 학생명, 아이디, 나이, 주소, 연락처..
            - 학생(학생명, 아이디, 나이, 주소, 연락처..)
        b. 강의실 정보 관리
            - 정보 : 강의실 호수, 강의실 크기, 인원수 등..
            - 강의실(호수, 크기, 인원수..)
    
            
3. Entity Relationship, 엔티티 관계
    - 테이블과 테이블간의 관계
    - 레코드와 레코드간의 관계
    
    
4. Attribute, 속성
    - 엔티티가 가지는 특성
    - 엔티티를 만들기 위해서 하나로 모였던 정보들
    - 컬럼
    
    
5. Tuple, 튜플
    - 엔티티에 정의된 규칙에 따라 실제 만들어진 데이터
    
ERD > Entity, Attribute, Relation 등을 표현하는 방법(그림 그리는 방법)

1. Entity
    - 사각형으로 표시
    - 이름을 작성
    - 엔티티명은 ERD내에서 중복 불가능
    - 권장 > 단수로 표기
    
2. Attribute
    - 엔티티안에 표시(목록 형태)
    - 작명법 > 맘대로.. 
    - 단수로 표기
    - 추가 표기사항(속성에 대한 성질 기술)
        a. NN, Not null
            - 해당 속성을 비워둘 수 없다.
            - 필수값
        b. ND, Not Duplicate
            - 해당 속성은 중복될 수 없다.
            - 유일값(Unique)
        
        1. 중복되면 안되고, 생략되면 안된다.(NN,ND)
            - #*속성명 (PK가 아닐까 생각)
        2. 생략되면 안된다. (NN)
            - *속성명
        3. 중복되면 안된다. (ND)
            - #속성명
        4. 중복되도 되고, 생략되도 된다.    
            - 속성명
            - o속성명
            - optional 
    
        
3. Relationship
    - 가장 중요한 표현
    - 엔티티와 엔티티간의 관계
    - PK와 FK의 관계(행과 행간의 관계)
    - 관계의 종류(패턴)
        A엔티티(주체) : B엔티티(상대)
        a. 1 : 1
            - 1개의 A는 1개의 B로 구성
        b. 1 : 0
            - 1개의 A는 0개의 B로 구성 > 무관계
        c. 1 : N
            - 1개의 A는 1개 이상의 B로 구성
        d. 1 : M
            - 1개의 A는 0개 이상의 B로 구성
        
            
1. 수집된 정보 > 엔티티 생성

2. 엔티티 > 속성 생성

----------------------------------- 무관계

3. 엔티티의 관계 생성

4. 관계 차수 지정(1:1, 1:N ..)

----------------------------------- 관계 > 논리 다이어그램

5. 엔티티, 속성 > 물리명 생성 

6. 자료형, 길이, 도메인, NN, Default 생성 

----------------------------------- 물리 다이어그램 > 최종 산출물


팀작업
1. 1+2 > 팀회의 없이 > 팀원별 각각 따로 구현
    - 각자 본인이 모든 요구분석서 해석 > 데이터 도출 > 엔티티(속성) 도출 > 엔티티 그리기
    
2. 1번의 산출물 팀회의
    - 엔티티가 올바르게 도출 확인?
    - 속성이 올바르게 도출 확인?
    - 누락된 요구사항 확인?
    - 한명씩 돌아가면서 자기 ERD 설명
    - 모든 ERD > 통합 > 최종 엔티티 결정
    
3. 3+4 > 팀회의 없이 > 팀원별 각각 따로 구현
    - 2번의 통합 최종 ERD > 관계 생성 + 요구분석서 확인하면서..
    
4. 3번의 산출물 팀회의
    - 관계가 올바른지?
    - 차수가 올바른지?
    - 한명씩 돌아가면서 자기 ERD 설명
    - 통합 작업
    
5. 5+6
    - 팀회의 > 명명법, 제약사항 > 규칙 정하고 시작
    > 1/N작업
    
6. 통합

*/




/* 정규화, Normalization
    - 모델링 작업 > ERD > 정규화 > 안정성 높고, 작업하기 편한 ERD
    - 자료의 손실이나, 불필요한 정보를 없애고, 데이터의 일관성을 유지하며, 
        데이터 종속성을 최소화하기 위해 자료구조(ERD)를 수정하는 작업
    - 우리가 만든 테이블(ERD) > 비정형, 비정규화 상태 > 정규화 > 정규화된 구조
    - 제 1정규화 > 제 2정규화 > 제 3정규화 등.. 
    - 제 1~3정규화 + 역정규화

관계형 데이터베이스 시스템이 지향하는 데이터베이스의 상태
1. 최대한 null 상태의 셀을 가지지 않는다.
2. 중복값을 저장하지 않는다. > 동일한 성격의 데이터를 2개 이상의 테이블에 저장하지 않는다.
3. 하나의 셀 > 원자값(단일값)


정규화 목적
1. null 최대한 제거
2. 중복값 제거
3. 자료 삽입, 갱신, 삭제에 따른 이상 현상 제거 > 데이터 무결성 보장


이상 현상
1. 삽입 이상, Insertion Anormaly
    - 특정 테이블에 데이터를 삽입할 때 원하지 않는 데이터까지 같이 넣어야 하는 상황

2. 갱신 이상, Update Anormaly
    - 동일한 데이터가 2개 이상의 테이블에 존재할 때 
    > 그 중 1개는 수정했지만, 다른 1개를 수정하지 못했을 때 
    > 두 데이터 간의 이상 오류가 발생한다.
    > 즉, 2개의 데이터 중 어떤 데이터가 올바른 데이터인지 구분을 하지 못하는 이상 발생

3. 삭제 이상, Deletion Anormaly
    - 특정 테이블에서 데이터를 삭제할 때 원하지 않는 데이터까지 같이 지워지는 상황


함수 종속, Functional Dependency
    - 하나의 테이블 내 컬럼끼리의 관계 표현
    - 정규화는 '부분 함수 종속'이나 '이행 함수 종속'을 모두 없애고, 모든 컬럼의 관계를 '완전 함수 종속'으로 만드는 작업.
    
    1. 완전 함수 종속, Full Functional Dependency
        - 기본키가 아닌 나머지 컬럼들은 기본키 전체에 대해 종속적이여야함. (일부에만 종속되면 안됨(부분 함수 종속)!)
    2. 부분 함수 종속, Partial Functional Dependency
    3. 이행 함수 종속, Transitive Functional Dependency


정규화
    - 1NF ~ 3NF(Normal Form)
    - 1개 테이블 -> (정규화) -> 2개 이상의 테이블

제 1정규화, 1NF
    - 모든 컬럼은 원자값을 가진다.
    - 여러 개의 분리 가능한 값을 1개의 컬럼 안에 넣지 말 것
    
제 2정규화, 2NF
    - 기본 키가 아닌 모든 컬럼은 기본키에 완전 함수 종속이어야 한다.
    - 부분 함수 종속 발견 !! > 부분 함수 종속 제거
    - 주로 복합키를 가지는 테이블에서 발견되며, 일부 컬럼이 복합키 모두에게 종속이 아니라,
        복합키 일부에만 종속되는 현상을 제거

제 3정규화, 3NF
    - 기본 키가 아닌 다른 컬럼에게 종속되는 컬럼이 존재하면 안된다.
    - 이행 함수 종속 발견!! > 이행 함수 종속 제거
    
역정규화
    - 정규화된 결과를 다시 원래대로 되돌리는 작업
    - 2개 이상의 테이블 > 1개 테이블
    - 수업 중 사용 금지!!


*/









